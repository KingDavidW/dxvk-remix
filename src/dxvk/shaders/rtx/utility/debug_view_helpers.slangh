/*
* Copyright (c) 2022-2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/utility/debug_view_indices.h"
#include "rtx/utility/color.slangh"

vec4 readInDebugView(uvec2 pixelCoordinate)
{
  return DebugView[pixelCoordinate];
}

void storeInDebugView(uvec2 pixelCoordinate, bool value)
{
  imageStore(DebugView, ivec2(pixelCoordinate), value ? vec4(1.0) : vec4(0.0));
}

void storeInDebugView(uvec2 pixelCoordinate, vec4 value)
{
  imageStore(DebugView, ivec2(pixelCoordinate), value);
}

void storeInDebugView(uvec2 pixelCoordinate, vec3 value)
{
  storeInDebugView(pixelCoordinate, vec4(value, 1.0f));
}

void storeInDebugView(uvec2 pixelCoordinate, vec2 value)
{
  storeInDebugView(pixelCoordinate, vec4(value, 0.0f, 1.0f));
}

void storeInDebugView(uvec2 pixelCoordinate, float value)
{
  storeInDebugView(pixelCoordinate, vec4(value, value, value, 1.0f));
}

void storeInDebugView(uvec2 pixelCoordinate, f16vec4 value)
{
  storeInDebugView(pixelCoordinate, vec4(value));
}

void storeInDebugView(uvec2 pixelCoordinate, f16vec3 value)
{
  storeInDebugView(pixelCoordinate, vec3(value));
}

void storeInDebugView(uvec2 pixelCoordinate, f16vec2 value)
{
  storeInDebugView(pixelCoordinate, vec2(value));
}

void storeInDebugView(uvec2 pixelCoordinate, float16_t value)
{
  storeInDebugView(pixelCoordinate, float(value));
}

void storeInDebugView(uvec2 pixelCoordinate, uint value)
{
  storeInDebugView(pixelCoordinate, float(value));
}

void accumulateInDebugViewAdd(u16vec2 pixelCoordinate, uint value)
{
  vec4 prevValue = imageLoad(DebugView, pixelCoordinate);
  storeInDebugView(pixelCoordinate, prevValue + vec4(value));
}

void accumulateInDebugViewAdd(u16vec2 pixelCoordinate, vec4 value)
{
  vec4 prevValue = imageLoad(DebugView, pixelCoordinate);
  storeInDebugView(pixelCoordinate, prevValue + value);
}

void accumulateInDebugViewMax(u16vec2 pixelCoordinate, vec4 value)
{
  vec4 prevValue = imageLoad(DebugView, pixelCoordinate);
  storeInDebugView(pixelCoordinate, max(prevValue, value));
}

void accumulateInDebugViewMaxUsingLuminance(u16vec2 pixelCoordinate, vec4 value)
{
  vec4 prevValue = imageLoad(DebugView, pixelCoordinate);
  const float prevLuminance = calcBt709Luminance(prevValue.rgb);
  const float luminance = calcBt709Luminance(value.rgb);
  storeInDebugView(pixelCoordinate, luminance > prevLuminance ? value : prevValue);
}

void accumulateInDebugViewAnd(u16vec2 pixelCoordinate, uint value)
{
  vec4 prevValue = imageLoad(DebugView, pixelCoordinate);
  storeInDebugView(pixelCoordinate, vec4(uint(prevValue.x) & value));
}

void accumulateInDebugViewOr(u16vec2 pixelCoordinate, uint value)
{
  vec4 prevValue = imageLoad(DebugView, pixelCoordinate);
  storeInDebugView(pixelCoordinate, vec4(uint(prevValue.x) | value));
}

// Analytically integrated checkerboard (box filter).
float filteredCheckers(
  vec2 uv, vec2 duvdx, vec2 duvdy, vec2 rcpUvToBoxSize,
  out float numPixelsInBox)
{
  uv *= rcpUvToBoxSize;
  duvdx *= rcpUvToBoxSize;
  duvdy *= rcpUvToBoxSize;

  // Box filtered checkerboard
  // Ref: http://iquilezles.org/www/articles/filterableprocedurals/filterableprocedurals.htm
  float epsilon = 1e-6f;
  vec2 w = max(max(abs(duvdx), abs(duvdy)), epsilon);
  vec2 i = 2.0 * (abs(fract((uv - 0.5 * w) * 0.5) - 0.5)-
                  abs(fract((uv + 0.5 * w) * 0.5 ) - 0.5)) / w;
                  
  numPixelsInBox = 1 / max(w.x, w.y);
  
  float checkers = 0.5 - 0.5 * i.x * i.y;

  return checkers; 
}

float calculateNormalizedRelativeValue(float x, float minValue, float maxValue)
{
  return saturate((x - minValue) / (maxValue - minValue));
}

// Calculates a filtered checkers scale based on textures resolution.
// boxSizeNumTexels: used only if >= 1. Otherwise, default is used
// checkersStrength: used only if > 0. Otherwise, default is used
// checkersValue: scale value for checkers with boxSizeNumTexels per box
// texelCheckersStrength: scale value for checkers with 1 texel per box
void calculateTextureResolutionCheckers(
  vec2 uv, vec2 duvdx, vec2 duvdy, vec2 texDims, 
  uint boxSizeNumTexels, float checkersStrength,
  out float checkersValue,
  out float texelCheckersValue,
  out float texelCheckersStrength) 
{
  boxSizeNumTexels = boxSizeNumTexels >= 1 ? min(boxSizeNumTexels, 32 * 1024) : 64;
  vec2 rcpUvToBoxSize = texDims / (float) boxSizeNumTexels;

  // Calculate checkers value for multi-texel box
  float numPixelsInMultiTexelBox;
  checkersValue = filteredCheckers(uv, duvdx, duvdy, rcpUvToBoxSize, numPixelsInMultiTexelBox);

  // Calculate checkers value for texel box
  float numPixelsInTexelBox;
  boxSizeNumTexels = 1;
  rcpUvToBoxSize = texDims / (float) boxSizeNumTexels;
  texelCheckersValue = filteredCheckers(uv, duvdx, duvdy, rcpUvToBoxSize, numPixelsInTexelBox);

  // Modulate texel checkers value since it can be very high frequency.
  // Start displaying per texel checkers when both the checker and texel checker boxes are large enough to avoid too much noise.
  // The reason for taking the checker box size into consideration is to limit texel checker box strength when a checker box shows only a few texels   
  const vec2 numPixelsPerMultiTexelBoxBounds = vec2(40, 120);
  const vec2 numPixelsPerTexelBoxBounds = vec2(4, 20);
  texelCheckersStrength = 
    calculateNormalizedRelativeValue(numPixelsInMultiTexelBox, numPixelsPerMultiTexelBoxBounds.x, numPixelsPerMultiTexelBoxBounds.y) *
    calculateNormalizedRelativeValue(numPixelsInTexelBox, numPixelsPerTexelBoxBounds.x, numPixelsPerTexelBoxBounds.y);

  // Scale calculated checkers value with the input checkers strength
  const float maxTexelCheckersStrength = 0.5;
  checkersStrength = checkersStrength > 0 ? min(checkersStrength, 1) : 0.5;
  texelCheckersStrength = min(texelCheckersStrength, min(maxTexelCheckersStrength, checkersStrength));
  checkersValue = mix(1, checkersValue, checkersStrength);
  texelCheckersValue = mix(1, texelCheckersValue, texelCheckersStrength);
}

vec3 tintColorValueWithTextureResolutionCheckers(
  vec3 colorValue, vec2 uv, vec2 duvdx, vec2 duvdy, 
  vec2 texDims, uint boxSizeNumTexels, float checkersStrength) {

  // Ensure dealing with <0,1> color values so as to avoid dealing with  negatives and large inputs
  // when tinting the color
  colorValue = saturate(colorValue);

  // Calculate checkers values
  float checkersValue;
  float texelCheckersValue;
  float texelCheckersStrength;
  calculateTextureResolutionCheckers(
    uv, duvdx, duvdy, texDims, boxSizeNumTexels, checkersStrength, 
    checkersValue, texelCheckersValue, texelCheckersStrength);

  const float checkersColorWeight = 0.3;
  const vec3 checkersTintColor = checkersColorWeight * vec3(0.6, 0.76, 0.93);

  // Add a tint to checkers for very dark input colors so the checkers are always visible
  const float luminance = calcBt709Luminance(colorValue);
  colorValue = colorValue + pow((1 - luminance), 4) * checkersTintColor;

  // Use 1 - color for texel checkers so that they always appear a bit different from the base checker using original color
  const float texelCheckersColorWeight = 0.5;
  const vec3 texelCheckersTintColor = texelCheckersColorWeight * (1 - (colorValue * checkersValue));

  // Mix input color value with checkers' values
  return colorValue * checkersValue * texelCheckersValue 
    // Add a tint to texel checker areas
    + texelCheckersTintColor * texelCheckersStrength;
}