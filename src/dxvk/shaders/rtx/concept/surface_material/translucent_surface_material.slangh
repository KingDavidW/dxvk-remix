/*
* Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Translucent Surface Material Functions

TranslucentSurfaceMaterial translucentSurfaceMaterialCreate(MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial, const bool visibilityCheckOnly = false)
{
  if (visibilityCheckOnly)
  {
    TranslucentSurfaceMaterial translucentSurfaceMaterial = reinterpret<TranslucentSurfaceMaterial>(memoryPolymorphicSurfaceMaterial);
    translucentSurfaceMaterial.normalTextureIndex = BINDING_INDEX_INVALID;
    translucentSurfaceMaterial.emissiveColorTextureIndex = BINDING_INDEX_INVALID;
    translucentSurfaceMaterial.emissiveIntensity = 0.h;
    translucentSurfaceMaterial.refractiveIndex = 1.h;
    translucentSurfaceMaterial.emissiveColorConstant = 0.h;
    return translucentSurfaceMaterial;
  }
  else
  {
    return reinterpret<TranslucentSurfaceMaterial>(memoryPolymorphicSurfaceMaterial);
  }
}

// Note: This function should only be called on thick translucent surfaces and must be checked in advance.
f16vec3 translucentSurfaceMaterialEvalVolumeTransmittance(
  TranslucentSurfaceMaterial translucentSurfaceMaterial,
  float distance)
{
  // Note: Ideally we shouldn't be constantly decoding this on the GPU, but for now this is fine as we don't
  // really have a good place to store the attenuation coefficient without risking precision issues (though 16
  // bit floats might be acceptable).
  // Note: thicknessOrMeasurementDistance here is assumed to be positive always, as this code path is intended to only
  // be called on thick translucent surfaces (thin ones will have a negative thickness here instead).
  const vec3 attenuationCoefficient = transmittanceToAttenuationCoefficient(
    translucentSurfaceMaterial.transmittanceColor,
    translucentSurfaceMaterial.thicknessOrMeasurementDistance);
  const f16vec3 volumeAttenuation = evalBeerLambertAttenuation(attenuationCoefficient, distance);

  return volumeAttenuation;
}

f16vec3 translucentSurfaceMaterialEvalInfiniteVolumeTransmittance(TranslucentSurfaceMaterial translucentSurfaceMaterial)
{
  const vec3 attenuationCoefficient = transmittanceToAttenuationCoefficient(
    translucentSurfaceMaterial.transmittanceColor,
    translucentSurfaceMaterial.thicknessOrMeasurementDistance);
  const f16vec3 volumeAttenuation = evalBeerLambertInfiniteAttenuation(attenuationCoefficient);

  return volumeAttenuation;
}
